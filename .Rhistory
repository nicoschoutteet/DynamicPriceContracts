geom_label(mapping = aes(y = Price + 1, label = HighLow),
vjust = 0, size = 2, label.r = unit(0, "lines"), label.size = .1,
colour = "darkgrey") +
geom_point_interactive(shape = "-",
mapping = aes(group = 1,
tooltip = paste0(hour(DateTime),
"-",
Price))) +
scale_x_continuous(name = element_blank(),
breaks = seq(0, 23, 1)) +
scale_y_continuous(name = element_blank(),
labels = scales::number_format(suffix = " €/MWh")) +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(linewidth = .1,
linetype = "dashed",
colour = "darkgrey"))
girafe(ggobj = plot)
plot <- ggplot(data = filter(df, as.Date(DateTime, tz = "Europe/Brussels")
== as.Date("2023-01-01", tz = "Europe/Brussels")),
mapping = aes(x = hour(DateTime), y = Price)) +
geom_hline(yintercept = 0,
linewidth = .25, linetype = "solid", colour = "black") +
geom_label(mapping = aes(y = Price + 1, label = HighLow),
vjust = 0, size = 2, label.r = unit(0, "lines"), label.size = .1,
colour = "darkgrey") +
geom_step(direction = "mid", colour = "#044f67") +
geom_point_interactive(shape = "-", colour = "#044f67",
mapping = aes(group = 1,
tooltip = paste0(hour(DateTime),
"-",
Price))) +
scale_x_continuous(name = element_blank(),
breaks = seq(0, 23, 1)) +
scale_y_continuous(name = element_blank(),
labels = scales::number_format(suffix = " €/MWh")) +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(linewidth = .1,
linetype = "dashed",
colour = "darkgrey"))
girafe(ggobj = plot)
plot <- ggplot(data = filter(df, as.Date(DateTime, tz = "Europe/Brussels")
== as.Date("2023-01-01", tz = "Europe/Brussels")),
mapping = aes(x = hour(DateTime), y = Price)) +
geom_hline(yintercept = 0,
linewidth = .25, linetype = "solid", colour = "black") +
geom_label(mapping = aes(y = Price + 1, label = HighLow),
vjust = 0, size = 2, label.r = unit(0, "lines"), label.size = .1,
colour = "darkgrey") +
geom_step(direction = "mid", colour = "#044f67") +
geom_point_interactive(shape = "-", colour = "#044f67",
mapping = aes(group = 1,
tooltip = paste0("Day ahead price on ",
format(DateTime,
"%d %B %Y %H:%M"),
":\n",
format(round(Price, 1),
decimal.mark =",",
big.mark = "."),
" €/MWh"))) +
scale_x_continuous(name = element_blank(),
breaks = seq(0, 23, 1)) +
scale_y_continuous(name = element_blank(),
labels = scales::number_format(suffix = " €/MWh")) +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(linewidth = .1,
linetype = "dashed",
colour = "darkgrey"))
girafe(ggobj = plot)
paste0("Day ahead price on ",
format(df$DateTime,
"%d %B %Y %H:%M"),
":\n",
format(round(df$Price, 1),
decimal.mark =",",
big.mark = "."),
" €/MWh")
plot <- ggplot(data = filter(df, as.Date(DateTime, tz = "Europe/Brussels")
== as.Date("2023-01-01", tz = "Europe/Brussels")),
mapping = aes(x = hour(DateTime), y = Price)) +
geom_hline(yintercept = 0,
linewidth = .25, linetype = "solid", colour = "black") +
geom_label(mapping = aes(y = Price + 1, label = HighLow),
vjust = 0, size = 2, label.r = unit(0, "lines"), label.size = .1,
colour = "darkgrey") +
geom_step(direction = "mid", colour = "#044f67") +
geom_point_interactive(shape = "-", colour = "#044f67",
mapping = aes(group = 1,
tooltip = paste0("Day ahead price on ",
format(DateTime,
"%d %B %Y %H:%M"),
":\n",
format(round(Price, 1),
decimal.mark =",",
big.mark = "."),
" EUR/MWh"))) +
scale_x_continuous(name = element_blank(),
breaks = seq(0, 23, 1)) +
scale_y_continuous(name = element_blank(),
labels = scales::number_format(suffix = " €/MWh")) +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(linewidth = .1,
linetype = "dashed",
colour = "darkgrey"))
girafe(ggobj = plot)
plot <- ggplot(data = filter(df, as.Date(DateTime, tz = "Europe/Brussels")
== as.Date("2023-01-01", tz = "Europe/Brussels")),
mapping = aes(x = hour(DateTime), y = Price)) +
geom_hline(yintercept = 0,
linewidth = .15, linetype = "solid", colour = "black") +
geom_label(mapping = aes(y = Price + 1, label = HighLow),
vjust = 0, size = 2, label.r = unit(0, "lines"), label.size = .1,
colour = "darkgrey") +
geom_step(direction = "mid", colour = "#044f67") +
geom_point_interactive(shape = "-", colour = "#044f67",
mapping = aes(group = 1,
tooltip = paste0("Day ahead price on ",
format(DateTime,
"%d %B %Y %H:%M"),
":\n",
format(round(Price, 1),
decimal.mark =",",
big.mark = "."),
" EUR/MWh"))) +
scale_x_continuous(name = element_blank(),
breaks = seq(0, 23, 1)) +
scale_y_continuous(name = element_blank(),
labels = scales::number_format(suffix = " €/MWh")) +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(linewidth = .1,
linetype = "dashed",
colour = "darkgrey"))
girafe(ggobj = plot)
plot <- ggplot(data = filter(df(), as.Date(DateTime, tz = "Europe/Brussels")
== as.Date(input$SelectedDate, tz = "Europe/Brussels")),
mapping = aes(x = hour(DateTime), y = Price)) +
geom_hline(yintercept = 0,
linewidth = .15, linetype = "solid", colour = "black") +
geom_label(mapping = aes(y = Price + 1, label = HighLow),
vjust = 0, size = 2, label.r = unit(0, "lines"), label.size = .1,
colour = "darkgrey") +
geom_step(direction = "mid", colour = "#044f67") +
geom_point_interactive(shape = "19", colour = "#044f67",
mapping = aes(group = 1,
tooltip = paste0("Day ahead price on ",
format(DateTime,
"%d %B %Y %H:%M"),
":\n",
format(round(Price, 1),
decimal.mark =",",
big.mark = "."),
" EUR/MWh"))) +
scale_x_continuous(name = element_blank(),
breaks = seq(0, 23, 1)) +
scale_y_continuous(name = element_blank(),
labels = scales::number_format(suffix = " €/MWh")) +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(linewidth = .1,
linetype = "dashed",
colour = "darkgrey"))
plot <- ggplot(data = filter(df(), as.Date(DateTime, tz = "Europe/Brussels")
== as.Date(input$SelectedDate, tz = "Europe/Brussels")),
mapping = aes(x = hour(DateTime))) +
geom_step(mapping = aes(y = FlexConsumptionGood),
direction = "mid", colour = "#b2e061") +
geom_point_interactive(shape = 19, colour = "#b2e061", hover_nearest = TRUE,
mapping = aes(y = FlexConsumptionGood,
group = 1,
data_id = DateTime,
tooltip = paste0(
"Electricity offtake including ",
input$Flexibility,
"%\nshift in correct direction:\n",
format(round(FlexConsumptionGood, 1),
big.mark = ".",
decimal.mark = ","),
" kWh."))) +
geom_step(mapping = aes(y = FlexConsumptionBad),
direction = "mid", colour = "#fd7f6f") +
geom_point_interactive(shape = 19, colour = "#fd7f6f", hover_nearest = TRUE,
mapping = aes(y = FlexConsumptionBad,
group = 1,
data_id = DateTime,
tooltip = paste0(
"Electricity offtake including ",
input$Flexibility,
"%\nshift in wrong direction:\n",
format(round(FlexConsumptionBad, 1),
big.mark = ".",
decimal.mark = ","),
" kWh."))) +
geom_step(mapping = aes(y = Consumption),
direction = "mid", colour = "#7eb0d5") +
geom_point_interactive(shape = 19, colour = "#7eb0d5", hover_nearest = TRUE,
mapping = aes(y = Consumption,
group = 1,
data_id = DateTime,
tooltip = paste0(
"Actual electricity offtake\n",
"without shift:\n",
format(round(Consumption, 1),
big.mark = ".",
decimal.mark = ","),
" kWh."))) +
scale_x_continuous(name = element_blank(),
breaks = seq(0, 23, 1)) +
scale_y_continuous(name = element_blank(),
labels = scales::number_format(suffix = " kWh",
big.mark = ".",
decimal.mark = ",")) +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(linewidth = .1,
linetype = "dashed",
colour = "darkgrey"))
install.packages("shinycssloaders")
#| context: server
options(shiny.maxRequestSize=30*1024^2)
source("DataImport.R")
df_rd %>%
mutate(Consumption = Profile * 3500) %>%
group_by(as.Date(DateTime, tz = "Europe/Brussels"))
df_temp <- df_rd %>%
mutate(Consumption = Profile * 3500) %>%
group_by(as.Date(DateTime, tz = "Europe/Brussels"))
df_temp <- df_rd %>%
mutate(Consumption = Profile * 3500)
df_rd %>%
mutate(Consumption = Profile * 3500)
mutate(HighLow = case_when(rank(-Price,
ties.method = "random") %in%
1:6 ~ "H",
rank(Price,
ties.method = "random") %in%
1:6 ~ "L",
TRUE ~ NA),
FlexConsumptionGood = case_when(HighLow == "H"
~ Consumption *
(1 - 80 * .01),
HighLow == "L"
~ Consumption +
sum(Consumption[HighLow == "H"],
na.rm = TRUE) *
80 * .01 /
6,
TRUE ~ Consumption),
FlexConsumptionBad = case_when(HighLow == "L"
~ Consumption *
(1 - 80 * .01),
HighLow == "H"
~ Consumption +
sum(Consumption[HighLow == "L"],
na.rm = TRUE) *
80 * .01  /
6,
TRUE ~ Consumption))
df_rd %>%
mutate(Consumption = Profile * 3500) %>%
group_by(as.Date(DateTime, tz = "Europe/Brussels")) %>%
mutate(HighLow = case_when(rank(-Price,
ties.method = "random") %in%
1:6 ~ "H",
rank(Price,
ties.method = "random") %in%
1:6 ~ "L",
TRUE ~ NA),
FlexConsumptionGood = case_when(HighLow == "H"
~ Consumption *
(1 - 80 * .01),
HighLow == "L"
~ Consumption +
sum(Consumption[HighLow == "H"],
na.rm = TRUE) *
80 * .01 /
6,
TRUE ~ Consumption),
FlexConsumptionBad = case_when(HighLow == "L"
~ Consumption *
(1 - 80 * .01),
HighLow == "H"
~ Consumption +
sum(Consumption[HighLow == "L"],
na.rm = TRUE) *
80 * .01  /
6,
TRUE ~ Consumption))
df_rd %>%
left_join(
read_csv2("data/Verbruikshistoriek_elektriciteit_541448860000948672_20230101_20240101_kwartiertotalen.csv") %>%
mutate(DateTime = with_tz(as.POSIXct(paste(as.Date(
`Van Datum`, "%d-%m-%Y"), `Van Tijdstip`)),
tz = "Europe/Brussels")) %>%
filter(Register %in% c("Afname Nacht", "Afname Dag")) %>%
group_by(DateTime = floor_date(DateTime, "1 hour")) %>%
summarize(Consumption = sum(Volume, na.rm = TRUE)) %>%
ungroup() %>%
arrange(DateTime) %>%
mutate(Profile = Consumption / sum(Consumption, na.rm = TRUE))
)
read_csv2("data/Verbruikshistoriek_elektriciteit_541448860000948672_20230101_20240101_kwartiertotalen.csv") %>%
mutate(DateTime = with_tz(as.POSIXct(paste(as.Date(
`Van Datum`, "%d-%m-%Y"), `Van Tijdstip`)),
tz = "Europe/Brussels")) %>%
filter(Register %in% c("Afname Nacht", "Afname Dag")) %>%
group_by(DateTime = floor_date(DateTime, "1 hour")) %>%
summarize(Consumption = sum(Volume, na.rm = TRUE)) %>%
ungroup() %>%
arrange(DateTime) %>%
mutate(Profile = Consumption / sum(Consumption, na.rm = TRUE))
df_rd
read_csv2("data/Verbruikshistoriek_elektriciteit_541448860000948672_20230101_20240101_kwartiertotalen.csv") %>%
mutate(DateTime = with_tz(as.POSIXct(paste(as.Date(
`Van Datum`, "%d-%m-%Y"), `Van Tijdstip`)),
tz = "Europe/Brussels")) %>%
filter(Register %in% c("Afname Nacht", "Afname Dag")) %>%
group_by(DateTime = floor_date(DateTime, "1 hour")) %>%
summarize(Consumption = sum(Volume, na.rm = TRUE)) %>%
ungroup() %>%
arrange(DateTime) %>%
mutate(Profile = Consumption / sum(Consumption, na.rm = TRUE))
df_rd
df_rd %>%
left_join(
read_csv2("data/Verbruikshistoriek_elektriciteit_541448860000948672_20230101_20240101_kwartiertotalen.csv") %>%
mutate(DateTime = with_tz(as.POSIXct(paste(as.Date(
`Van Datum`, "%d-%m-%Y"), `Van Tijdstip`)),
tz = "Europe/Brussels")) %>%
filter(Register %in% c("Afname Nacht", "Afname Dag")) %>%
group_by(DateTime = floor_date(DateTime, "1 hour")) %>%
summarize(Consumption = sum(Volume, na.rm = TRUE)) %>%
ungroup() %>%
arrange(DateTime) %>%
mutate(Profile = Consumption / sum(Consumption, na.rm = TRUE))
)
df_rd %>%
left_join(
read_csv2("data/Verbruikshistoriek_elektriciteit_541448860000948672_20230101_20240101_kwartiertotalen.csv") %>%
mutate(DateTime = with_tz(as.POSIXct(paste(as.Date(
`Van Datum`, "%d-%m-%Y"), `Van Tijdstip`)),
tz = "Europe/Brussels")) %>%
filter(Register %in% c("Afname Nacht", "Afname Dag")) %>%
group_by(DateTime = floor_date(DateTime, "1 hour")) %>%
summarize(Consumption = sum(Volume, na.rm = TRUE)) %>%
ungroup() %>%
arrange(DateTime) %>%
mutate(Profile = Consumption / sum(Consumption, na.rm = TRUE))
)
df_rd %>%
left_join(
read_csv2("data/Verbruikshistoriek_elektriciteit_541448860000948672_20230101_20240101_kwartiertotalen.csv") %>%
mutate(DateTime = with_tz(as.POSIXct(paste(as.Date(
`Van Datum`, "%d-%m-%Y"), `Van Tijdstip`)),
tz = "Europe/Brussels")) %>%
filter(Register %in% c("Afname Nacht", "Afname Dag")) %>%
group_by(DateTime = floor_date(DateTime, "1 hour")) %>%
summarize(Consumption = sum(Volume, na.rm = TRUE)) %>%
ungroup() %>%
arrange(DateTime) %>%
mutate(Profile = Consumption / sum(Consumption, na.rm = TRUE))
)
read_csv2("data/Verbruikshistoriek_elektriciteit_541448860000948672_20230101_20240101_kwartiertotalen.csv") %>%
mutate(DateTime = with_tz(as.POSIXct(paste(as.Date(
`Van Datum`, "%d-%m-%Y"), `Van Tijdstip`)),
tz = "Europe/Brussels")) %>%
filter(Register %in% c("Afname Nacht", "Afname Dag")) %>%
group_by(DateTime = floor_date(DateTime, "1 hour")) %>%
summarize(Consumption = sum(Volume, na.rm = TRUE)) %>%
ungroup() %>%
arrange(DateTime) %>%
mutate(Profile = Consumption / sum(Consumption, na.rm = TRUE))
df_rd %>%
select(-Profile) %>%
left_join(
read_csv2("data/Verbruikshistoriek_elektriciteit_541448860000948672_20230101_20240101_kwartiertotalen.csv") %>%
mutate(DateTime = with_tz(as.POSIXct(paste(as.Date(
`Van Datum`, "%d-%m-%Y"), `Van Tijdstip`)),
tz = "Europe/Brussels")) %>%
filter(Register %in% c("Afname Nacht", "Afname Dag")) %>%
group_by(DateTime = floor_date(DateTime, "1 hour")) %>%
summarize(Consumption = sum(Volume, na.rm = TRUE)) %>%
ungroup() %>%
arrange(DateTime) %>%
mutate(Profile = Consumption / sum(Consumption, na.rm = TRUE))
)
df_rd %>%
select(-Profile) %>%
left_join(
read_csv2("data/Verbruikshistoriek_elektriciteit_541448860000948672_20230101_20240101_kwartiertotalen.csv") %>%
mutate(DateTime = with_tz(as.POSIXct(paste(as.Date(
`Van Datum`, "%d-%m-%Y"), `Van Tijdstip`)),
tz = "Europe/Brussels")) %>%
filter(Register %in% c("Afname Nacht", "Afname Dag")) %>%
group_by(DateTime = floor_date(DateTime, "1 hour")) %>%
summarize(Consumption = sum(Volume, na.rm = TRUE)) %>%
ungroup() %>%
arrange(DateTime) %>%
mutate(Profile = Consumption / sum(Consumption, na.rm = TRUE))
) %>%
select(DateTime, Price, Profile, Consumption) %>%
group_by(as.Date(DateTime, tz = "Europe/Brussels")) %>%
mutate(HighLow = case_when(rank(-Price,
ties.method = "random") %in%
1:input$FlexibleHours ~ "H",
rank(Price,
ties.method = "random") %in%
1:input$FlexibleHours ~ "L",
TRUE ~ NA),
FlexConsumptionGood = case_when(HighLow == "H"
~ Consumption *
(1 - input$Flexibility * .01),
HighLow == "L"
~ Consumption +
sum(Consumption[HighLow == "H"],
na.rm = TRUE) *
input$Flexibility * .01 /
input$FlexibleHours,
TRUE ~ Consumption),
FlexConsumptionBad = case_when(HighLow == "L"
~ Consumption *
(1 - input$Flexibility * .01),
HighLow == "H"
~ Consumption +
sum(Consumption[HighLow == "L"],
na.rm = TRUE) *
input$Flexibility * .01  /
input$FlexibleHours,
TRUE ~ Consumption))
df_rd %>%
mutate(Consumption = Profile * input$UserConsumption) %>%
group_by(as.Date(DateTime, tz = "Europe/Brussels")) %>%
mutate(HighLow = case_when(rank(-Price,
ties.method = "random") %in%
1:input$FlexibleHours ~ "H",
rank(Price,
ties.method = "random") %in%
1:input$FlexibleHours ~ "L",
TRUE ~ NA),
FlexConsumptionGood = case_when(HighLow == "H"
~ Consumption *
(1 - input$Flexibility * .01),
HighLow == "L"
~ Consumption +
sum(Consumption[HighLow == "H"],
na.rm = TRUE) *
input$Flexibility * .01 /
input$FlexibleHours,
TRUE ~ Consumption),
FlexConsumptionBad = case_when(HighLow == "L"
~ Consumption *
(1 - input$Flexibility * .01),
HighLow == "H"
~ Consumption +
sum(Consumption[HighLow == "L"],
na.rm = TRUE) *
input$Flexibility * .01  /
input$FlexibleHours,
TRUE ~ Consumption))
#| context: server
options(shiny.maxRequestSize=30*1024^2)
source("DataImport.R")
df_rd %>%
mutate(Consumption = Profile * 3500) %>%
group_by(as.Date(DateTime, tz = "Europe/Brussels")) %>%
mutate(HighLow = case_when(rank(-Price,
ties.method = "random") %in%
1:6 ~ "H",
rank(Price,
ties.method = "random") %in%
1:6 ~ "L",
TRUE ~ NA),
FlexConsumptionGood = case_when(HighLow == "H"
~ Consumption *
(1 - 80 * .01),
HighLow == "L"
~ Consumption +
sum(Consumption[HighLow == "H"],
na.rm = TRUE) *
80 * .01 /
6,
TRUE ~ Consumption),
FlexConsumptionBad = case_when(HighLow == "L"
~ Consumption *
(1 - 80 * .01),
HighLow == "H"
~ Consumption +
sum(Consumption[HighLow == "L"],
na.rm = TRUE) *
80 * .01  /
6,
TRUE ~ Consumption))
?shiny::debounce
?invalidateLater
?shiny::invalidateLater
